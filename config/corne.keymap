/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y            &kp U  &kp I              &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D     &kp F  &kp G        &kp H            &kp J  &kp K              &kp L    &kp SEMI  &kp SQT
&kp LSHFT   &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N            &kp M  &kp COMMA          &kp DOT  &kp FSLH  &kp ESC
                          &kp LGUI  &mo 1  &kp SPACE    &kp RIGHT_SHIFT  &mo 2  &kp RIGHT_CONTROL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    |BTCLR|     | SPC |   | ENT |     | ALT |

            label = "Lower";
            bindings = <
&kp ESCAPE     &kp EXCLAMATION  &kp AT_SIGN        &kp HASH       &kp DOLLAR        &kp PERCENT      &kp EQUAL     &kp GRAVE              &kp COLON        &kp SEMICOLON      &kp PLUS        &kp BSPC
&kp TILDE      &kp LEFT_ALT     &kp RIGHT_CONTROL  &kp LEFT_GUI   &kp LEFT_SHIFT    &kp CARET        &kp ASTERISK  &kp LEFT_PARENTHESIS   &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp MINUS       &kp PIPE
&kp BACKSLASH  &kp SQT          &kp DOUBLE_QUOTES  &kp LESS_THAN  &kp GREATER_THAN  &kp AMPERSAND    &kp QUESTION  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp UNDERSCORE  &kp SLASH
                                                   &trans         &trans            &kp SPACE        &kp RET       &mo 3                  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Raise";
            bindings = <
&trans       &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3    &bt BT_SEL 4     &kp LG(LS(SPACE))  &kp LG(LS(J))  &kp UP_ARROW  &kp LC(LS(SPACE))  &kp CLCK       &kp BSPC
&trans       &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LG(SPACE)    &kp MINUS          &kp LEFT       &kp DOWN      &kp RIGHT          &kp DELETE     &trans
&bootloader  &trans        &trans            &trans        &trans          &kp LS(LG(C))    &kp ENTER          &kp BACKSPACE  &kp TAB       &kp LG(LS(S))      &kp LC(LS(S))  &bootloader
                                             &trans        &mo 4           &kp SPACE        &kp RET            &trans         &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &trans        &trans            &trans        &trans          &trans       &kp EQUAL     &kp N7        &kp N8        &kp N9        &kp PLUS   &trans
&trans  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_SHIFT  &trans       &kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS  &trans
&trans  &trans        &trans            &trans        &trans          &trans       &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH  &trans
                                        &trans        &trans          &kp SPACE    &kp ENTER     &trans        &trans
            >;
        };

        function_layer {
            bindings = <
&trans  &trans        &kp C_PREV         &kp C_PLAY    &kp C_NEXT       &kp C_BRIGHTNESS_DEC    &kp F12    &kp F7  &kp F8  &kp F9  &trans  &trans
&trans  &kp LEFT_ALT  &kp LEFT_CONTROL   &kp LEFT_GUI  &kp LEFT_SHIFT   &kp C_BRIGHTNESS_DEC    &kp F11    &kp F4  &kp F5  &kp F6  &trans  &trans
&trans  &trans        &kp C_VOLUME_DOWN  &kp C_MUTE    &kp C_VOLUME_UP  &trans                  &kp F10    &kp F1  &kp F2  &kp F3  &trans  &trans
                                         &trans        &trans           &kp SPACE               &kp ENTER  &trans  &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
